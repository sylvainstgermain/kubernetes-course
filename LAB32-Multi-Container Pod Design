------------------------------------------------------
kubectl apply -f objets-cours/...
kubectl config current-context
kubectl delete all --all

#Confirm namespace test exists.
kubectl get namespaces
---------------------------------------------------
Lab Objective
CKAD Objective
Understand Multi-Container Pod design patterns (e.g. ambassador, adapter, sidecar)
Lab Objective
Build a composite pod
In this lab you'll learn to deploy two composite pods (pods with multiple containers).

The first answers the question, Whats a simple method for tracking network traffic within a Pod?". To capture traffic inside our pod, we'll deploy a second container within our pod running TCPdump. This technique can be applied to almost any pod deployment for capturing traffic.

The second combines our "webby" container with an "nginx" container. In subsequent labs, we'll include a 3rd container in this pod arrangement to augment our website with a blogging service.

Funny XKCD comic "sidecar" design: https://imgs.xkcd.com/comics/containers.png
---------------------------------------------------------

kubectl apply -f objets-cours/netgrabber.yam

#Attach to the container tcpdumper (-c tcpdumper) within the pod netgrab (netgrab). After you run this command, the screen will say something like, Press ENTER if you don't see a command prompt. Disregard this message as it is a bit misleading.
kubectl attach netgrab -c tcpdumper

#Connect via a shell (-- sh) to the container busybox (-c busybox) within the pod netgrab (-it netgrab).
kubectl exec -it netgrab -c busybox -- sh
ping 8.8.8.8 -c 10
exit

#Notice that the container tcpdumper is displaying the traffic produced by the pod. 
#Let's clean up this experiment. Exit the busybox image

#Stop the pod netgrab
NAME               READY   STATUS    RESTARTS   AGE
apple-app          1/1     Running   0          34m
banana-app         1/1     Running   0          32m
netgrab            2/2     Running   0          2m31s
nginx-configured   1/1     Running   0          3h16m

kubectl delete pod netgrab
pod "netgrab" deleted

#Once netgrab is deleted, type 'exit' to leave the split screen.

#Let's work on combining our website container with an NGINX container.
---
apiVersion: v1
kind: Pod
metadata:
  name: webby-nginx-combo
  labels:
    app: nginx-configured
spec:
  containers:
  - name: webby
    image: bchd.registry/alta3-webby
    ports:
    - containerPort: 8888          
  - name: nginx
    image: nginx:1.18.0
    ports:
      - containerPort: 80
      - containerPort: 443
    volumeMounts:
    - name: nginx-proxy-config
      mountPath: /etc/nginx/nginx.conf
      subPath: nginx.conf
    - name: my-index-file
      mountPath: /var/www/index.html
      subPath: index.html
    - name: static-demo-data
      mountPath: /var/www/static/nginx.txt
      subPath: nginx.txt
    - name: top-secret-keys
      mountPath: /etc/nginx/ssl
      readOnly: true   
  volumes:
  - name: nginx-proxy-config
    configMap:
      name: nginx-conf
  - name: my-index-file
    configMap:
      name: index-file
  - name: static-demo-data
    configMap:
      name: nginx-txt
  - name: top-secret-keys
    secret:
      secretName: webby-keys  

vim nginx-conf.yaml


#It is possible you have an old configMap called nginx-conf from a previous lab. Run the following command to remove it.
kubectl delete configmap nginx-conf

#You apply your new configMap
kubectl create -f

#Start the new composite pod.
kubectl create -f objets-cours/webby-nginx-combo.yaml

#It is possible you still have some forwarding information laying around from a previous lab. <
#Let's get rid of that config. If this command fails, no big deal.
sudo rm /etc/nginx/sites-enabled/fruit-ingress

#Port-forward the composite pod.
kubectl port-forward webby-nginx-combo 2224:80 --address 0.0.0.0















































