kubectl 
kubectl create -f https://static.alta3.com/projects/k8s/k8s-countdown.yaml

https://hub.docker.com/_/nginx
wget https://static.alta3.com/projects/k8s/nginx.conf.final -O ~/nginx.conf

# create the config map
kubectl create configmap nginx-conf --from-file=nginx.conf

How are files injected into containers within pods?
In Kubernetes this is done with ConfigMaps

Why would you want to inject a file into a container?
One reason is to apply files containing custom configurations that modify the way an application runs. Here we are taking an image from the Docker repository, and applying our own custom configuration.

What would happen if we injected a bad config file into our NGINX application?
*The container running the NGINX application would fail to start. Kubernetes would mark the pod as being in a failed state."

#Check if the ConfigMap was properly created.
kubectl get configmap

NAME         DATA   AGE
nginx-conf   1      3m7s

If the DATA value above is 0 (zero), the ConfigMap will NOT work.

Once again, you made this file in a previous lab, but let's make sure you didn't make any errors in creating it. Run the following command to download and extract index.html
wget https://static.alta3.com/projects/k8s/index.html2 -O ~/index.html

Create a ConfigMap for the index.html file. This is being created so that the file may be automatically injected into a pod at the time of creation.
kubectl create configmap index-file --from-file=index.html

Verify if the ConfigMap index-file was created.

kubectl get configmap
NAME         DATA   AGE
index-file   1      17s
nginx-conf   1      4m53s

Our pod will have a container running an NGINX application, and will expose files it finds within the directory /var/www/static/ (within the container). Create a text file with clearly identifiable content, the opening lines of George Orwell's 1984 should work.
echo "It was a bright cold day in April, and the clocks were striking thirteen." >> nginx.txt


#Create a ConfigMap of our text file.
kubectl create configmap nginx-txt --from-file=nginx.txt

#Verify if the ConfigMap is loaded.
kubectl get cm

NAME         DATA   AGE
index-file   1      2m11s
nginx-conf   1      6m47s
nginx-txt    1      18s

kubectl create -f nginx-configured.yaml

#Ensure your pod started.
kubectl get pod nginx-configured
NAME               READY   STATUS    RESTARTS   AGE
nginx-configured   1/1     Running   0          24s

#Port forward the pod.
kubectl port-forward nginx-configured 2224:80 --address=0.0.0.0

When a directory and config file already exists, override like this using subpath:
￼
containers:
- name: nginx
  volumeMounts:
    mountPath: /etc/nginx/nginx.conf
    subpath: nginx.conf
When a directory does NOT exist, plus you want to put a file in it, do this:

￼
containers:
- name: nginx
  volumeMounts:
    mountPath: /var/www/static/nginx.txt

# create a text file
vim new_file.txt

#Create a new ConfigMap from that text file.
kubectl create configmap new-file-cm --from-file=objets-cours/new_file.txt

#CHALLENGE 01 SOLUTION STEP - Edit the pod manifest to look like the following.
---
apiVersion: v1
kind: Pod
metadata:
  name: nginx-configured
  labels:
    app: nginx-configured
spec:
  containers:
  - name: nginx
    image: nginx:1.18.0
    ports:
    - containerPort: 80
    volumeMounts:
    - name: nginx-proxy-config
      mountPath: /etc/nginx/nginx.conf
      subPath: nginx.conf
    - name: my-index-file
      mountPath: /var/www/index.html
      subPath: index.html
    - name: static-demo-data
      mountPath: /var/www/static/nginx.txt
      subPath: nginx.txt
    - name: challenge-config             # this matches spec.volumes[3].name
      mountPath: /var/www/static/new_file.txt   # this is where the file appears INSIDE the pod
      subPath: new_file.txt              # if this file already exists, overwrite it
  volumes:
  - name: nginx-proxy-config
    configMap:
      name: nginx-conf
  - name: my-index-file
    configMap:
      name: index-file
  - name: static-demo-data
    configMap:
      name: nginx-txt
  - name: challenge-config          # this is the name to be used in spec.containers.volumeMounts
    configMap:
      name: new-file-cm             # must match the configMap stored in etcd (created with 
￼

#delete olgd pod
kubectl delete pod nginx-configured

#CHALLENGE 01 SOLUTION STEP - Create the new nginx-configured pod.
kubectl apply -f objets-cours/nginx-configured-NEW.yaml

#CHALLENGE 01 SOLUTION STEP - Port forward the newly configured nginx.
kubectl port-forward nginx-configured 2224:80 --address=0.0.0.0








