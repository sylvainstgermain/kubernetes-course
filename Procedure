git add *;git commit -a -m "www";git push

-------------------------------
Batir un container
-------------------------------

-------------------------------
Creer une image docker
-------------------------------

-- Fichier Dockerfile
vim scratch

#filename
FROM scratch

#name of the binary (image)
ADD webserver /

#add a directory
ADD deploy /deploy/

#there can only be one CMD in a dockerfile
CMD ["/webserver"]

# port that the container will listen on
EXPOSE 8888

-- Build
sudo docker build -t webby -f scratch .

-- run
sudo docker run -p 2224:8888 -it webby

-- test
-- Local port 2224 aux1, aux2 displays anything on port 2225
curl localhost:2224

sudo docker ps -a
sudo docker images
docker --version

-------------------------------
Upload image docker dans un registry
-------------------------------
 +------------>
   Upload your container to a registry that K8s trusts
                        +---------------------+
                        |                     |
+----------+   +--------+----------+   +------v-------+
|  Local   |   | Scratch Container |   | bchd.registry|
|  Webby   |   |  With Webby Files |   |   Registry   |
|  Files   |   |      Loaded       |   |              |
+----------+   +-------------------+   +--------------+

sudo docker run -d -p 2345:5000 registry:2

sudo vim /etc/hosts
127.0.0.1 localhost bchd.registry

#Next, we can make sure that we never have to remember
# (or reference) the local port that is being served by adding 
# a server to our nginx configuration.
sudo vim /etc/nginx/sites-enabled/reg
server {
    listen bchd.registry;
    client_max_body_size 100M;
    
    location / {
        proxy_pass http://127.0.0.1:2345;
        }
    }


sudo docker tag webby bchd.registry/stgermains-webby
sudo docker push bchd.registry/stgermains-webby
sudo docker image ls


-------------------------------
Batir un POD
-------------------------------
apiVersion: is a required key field. It defines the Kubernetes API you are using.
kind: For this lab, the value field will be either Pod or Deployment.
metadata: A required key that helps uniquely identify the object. Subkeys are name, uid, labels, and namespace.
spec: Specifies the desired state of an object. If a spec is deleted, the object will be purged from the system.
status: PURELY FYI - A system generated value that shows the actual state of the object at the current time.

kind : kubectl api-resources

vim my_first_pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: myfirstpod
spec:
  containers:
  - name: webster
    image: bchd.registry/alta3-webby

kubectl create -f my_first_pod.yaml
kubectl get pods

-------------------------------
deployments
-------------------------------
vi ~/webweb-deploy.yaml

---
apiVersion: apps/v1   # kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/
kind: Deployment  # kubernetes resource to make
metadata:
  name: webweb     # metadata.name the "human name" to apply
  labels:         # metadata.labels are interactive tools for organization
   app: webweb     # label key:pair (label for the deployment)
spec:             # the state to achive
  selector:     
    matchLabels:  # matches the pod being built
      app: webweb
  replicas: 3     # number of replicated pods to have
  template:       # how to build our pod
    metadata:   
      labels:     # label for the pod
        app: webweb
    spec:         # how to build the CONTINERS within the pod
      containers:
      - name: webweb      # build one container name webweb
        image: bchd.registry/alta3-webby     # REPLACE "888-sam" with the name of your image you created!!
        ports:
        - containerPort: 8888   # port container is listening on

kubectl apply -f webweb-deploy.yaml
kubectl delete deployment webweb

-------------------------------
Batir un Namespace
-------------------------------
kubectl get namespaces
kubectl describe namespace default

vi ~/test-ns.yaml

---
apiVersion: v1    # from kubernetes.io/docs
kind: Namespace   # type of resource to be created
metadata:
  name: test      # name to associate with this namespace

kubectl create -f test-ns.yaml 
kubectl get namespaces
kubectl describe namespace test

# quota
vi test-rq.yaml

---
apiVersion: v1           # from kubernetes.io/docs
kind: ResourceQuota      # kubernetes resource to be created
metadata:
  name: test-resourcequota  # name of ResourceQuota
spec:
  hard:                  # "may not exceed"
    cpu: "1"             # 1 cpu is == 1 vcore on a hypervisor or 1 hyperthread on bare metal
    memory: 1Gi          # 1 gig of memory

kubectl create -f test-rq.yaml --namespace=test
kubectl describe namespace test
kubectl get namespaces

# delete quota
kubectl delete -f test-rq.yaml --namespace=test

-------------------------------
Ajouter un contexte
-------------------------------
kubectl config use-context kubernetes-the-alta3-way
kubectl config view
vi ~/.kube/config

# clef pour utilisation de context
cd ~/k8s-certs/

kubectl config set-context dev-context --namespace=dev
kubectl config use-context dev-context
# only current context
kubectl config view --minify

kubectl config set-context dev-context --namespace=dev --user=admin --cluster=kubernetes-the-alta3-way
kubectl config view

# voir les contextes
kubectl config get-contexts

kubectl config set-context kubernetes-the-alta3-way --namespace=default


-------------------------------
Information sur PODS
-------------------------------


-------------------------------
Information sur Container
-------------------------------


-------------------------------
Information sur CLuster
-------------------------------
# GET
kubectl config use-context kubernetes-the-alta3-way
kubectl get all --all-namespaces
kubectl get all --all-namespaces | grep calico-kube-controllers

kubectl get services
kubectl get services --all-namespaces
kubectl get pods --all-namespaces
kubectl get pods --all-namespaces -o wide
kubectl get deployments
kubectl get secrets

# DESCRIBE
kubectl config get-contexts
kubectl config use-context kubernetes-the-alta3-way
kubectl run --port=8888 --requests='cpu=100m,memory=256Mi'  --image=bchd.registry/alta3-webby webweb
kubectl get pod
kubectl describe pod webweb
kubectl port-forward webweb 2224:8888 --address 0.0.0.0
kubectl describe pod webweb | grep IP
kubectl describe pod webweb| grep Controlled
kubectl get pods
kubectl get deployments
kubectl describe deployments webweb
kubectl delete pod webweb
kubectl get services
kubectl describe services
kubectl describe pods
kubectl describe nodes
kubectl describe nodes node-1
kubectl describe all --all-namespaces
kubectl get all --all-namespaces
kubectl describe service -n kube-system


-------------------------------
Batir un Registre (depot local)
-------------------------------

-------------------------------
Creer un label et le voir
-------------------------------
# tous les label
kubectl get pods --show-labels --all-namespaces

# create label
kubectl label pods nginx app=web_service

# look label 
kubectl get pods -L app

-------------------------------------
Creer une annotation
--------------------------------------
vim ~/nginx-annot.yaml

---
apiVersion: v1          # API version (endpoint) to use
kind: Pod               # this is the resource to create
metadata:
  name: nginx-annot     # this is the name of the kubernetes resource
  annotations:          # this is an annotation
    alta3.com/logo-url: "https://static.alta3.com/images/Alta3-logo_large.png"      
spec:
  containers:
  - name: nginx         # name of the container
    image: nginx:1.18.0  # image and version of image to use
    ports:
    - containerPort: 80

# voir
kubectl describe pod nginx-annot | grep Annotations

If you decided to add another annotation to your manifest and ran
 the above command again, you will not see the second annotation 
 on the list because the term "Annotations" which you are grepping 
 for only exists once in the description of the pod. Instead you 
 will run the same command with an added flag, -A 1 to get and 
 additional line after the initial match on "Annotations". 
 Command would look like so. 
 kubectl describe pod nginx-annot | grep -A 1 Annotations
 kubectl describe pod nginx-annot | grep -A 2 Annotations
 ...
 . You can increase that number the more annotations you have.

 -------------------------------------
Creer un ReplicaSet
--------------------------------------
vim ~/sise-rs.yaml

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: simpleservice
spec:
  replicas: 3
  selector:
    matchLabels:
      app: simpleservice
  template:
    metadata:
      labels:
        app: simpleservice
        version: "1"
    spec:
      containers:
        - name: simpleservice
          image: "nginx"
        - name: simpleservice-web
          image: mhausenblas/simpleservice:0.5.0
          ports:
           - name: web
             containerPort: 9876
             protocol: TCP    

kubectl apply -f kubernetes-course/objets-cours/sise-rs.yaml
kubectl get pods
kubectl get rs
kubectl describe rs
kubectl delete -f kubernetes-course/objets-cours/sise-rs.yaml

-------------------------------------
Creer un Deployment
--------------------------------------
vi zombie.yaml

apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: zombie
  labels: 
    app: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 3 # tells deployment to run 3 pods matching the template
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.18.0
        ports:
        - containerPort: 80

kubectl apply -f zombie.yaml
kubectl get pods
NAME                      READY   STATUS    RESTARTS   AGE
zombie-75ddd4d4b4-959gv   1/1     Running   0          20s
zombie-75ddd4d4b4-khm55   1/1     Running   0          20s
zombie-75ddd4d4b4-pbt4p   1/1     Running   0          20s

kubectl delete pod zombie-75ddd4d4b4-pbt4p
kubectl get pods
NAME                      READY   STATUS    RESTARTS   AGE
zombie-75ddd4d4b4-959gv   1/1     Running   0          57s
zombie-75ddd4d4b4-b5f8g   1/1     Running   0          11s
zombie-75ddd4d4b4-khm55   1/1     Running   0          57s

kubectl delete -f https://static.alta3.com/projects/k8s/zombie.yaml
kubectl apply -f https://static.alta3.com/projects/k8s/zombie.yaml
kubectl get deployment
kubectl delete deployment zombie
kubectl get pods
kubectl delete deploy -l app=nginx

kubectl apply -f objets-cours/webby-deploy.yaml
kubectl delete -f objets-cours/webby-deploy.yaml
kubectl apply -f objets-cours/webby-deploy.yaml
kubectl delete deployment webservice
kubectl apply -f objets-cours/webby-deploy.yaml
kubectl delete deployment -l app=webby

-------------------------------------
Rollback & Update
--------------------------------------
kubectl apply -f zombie.yaml
kubectl get deployments
kubectl rollout history deploy zombie

# add annotation to create a change
kubectl annotate deployment zombie kubernetes.io/change-cause="deployed ver. 1.18.0"
kubectl rollout history deploy zombie

# look in the container
kubectl exec -it zombie-75ddd4d4b4-9r4nv -- bash
nginx -v
nginx version: nginx/1.18.0

#Edit the zombie deployment file:
#NGINX version from 1.18.0 into 1.19.6.
kubectl apply -f objets-cours/zombie.yaml

kubectl rollout history deploy zombie
deployment.apps/zombie 
REVISION  CHANGE-CAUSE
1         deployed ver. 1.18.0
2         deployed ver. 1.18.0

#Manually set an annotation on the CHANGE-CAUSE field. NOTE: Setting 
#this annotation could be part of an automated process
kubectl annotate deployment zombie kubernetes.io/change-cause="ver. 1.19.6"

kubectl rollout history deploy zombie
deployment.apps/zombie 
REVISION  CHANGE-CAUSE
1         deployed ver. 1.18.0
2         ver. 1.19.6

#Check in the container
kubectl exec -it zombie-dc59bf87c-4hl5t -- bash
nginx -v
ginx version: nginx/1.19.6

Now apply that change and see what the below pane shows 
as your rollout is taking effect. This time we'll include 
the --record flag which should auto update our CHANGE-CAUSE field.

kubectl apply -f objets-cours/zombie.yaml --record

kubectl rollout history deploy zombie
deployment.apps/zombie
REVISION  CHANGE-CAUSE
1         deployed ver. 1.18.0
2         ver. 1.19.6
3         kubectl apply --filename=zombie.yaml --record=true

kubectl annotate deployment zombie kubernetes.io/change-cause="deployed latest stable release"

kubectl rollout history deploy zombie
deployment.apps/zombie 
REVISION  CHANGE-CAUSE
1         deployed ver. 1.18.0
2         ver. 1.19.6
3         deployed latest stable release

----- Rollback
# Info
kubectl rollout history deploy zombie --revision=1
kubectl rollout history deploy zombie --revision=2

#Check the status of the rollouts.
kubectl rollout status deploy zombie

#Now attempt to undo a rollout via a rollback. The 'undo' 
#command undoes the most recent update.
kubectl rollout undo deploy/zombie
kubectl rollout status deploy zombie

kubectl get pods

# check pods
kubectl exec -it zombie-dc59bf87c-2mbbj -- bash
nginx -v
nginx version: nginx/1.19.6

# To rollback to a specific revision on "zombie", you would issue 
# kubectl rollout undo deploy/zombie --to-revision=n, 
# where 'n' is the revision you wish to select. Try to rollback 
# to the oldest revision listed available to you.
kubectl rollout undo deploy/zombie --to-revision=1

# delete deployment
kubectl delete deploy zombie

-------------------------------------
SCALE
--------------------------------------
#Scale out the number of replicas for the sise pod.
kubectl scale deployment sise-deploy --replicas=3

kubectl get pods | grep sise
kubectl describe deployments sise-deploy
-----------------------------------------
Declarative Scaling with kubectl apply
-----------------------------------------
kubectl apply -f objets-cours/sise-deploy.yaml

kubectl get rs | grep sise

#Let's run through what we just did a second time, only now, replace the simpleservice image with the tagged version of the website (webby)
vim webby-deploy.yaml

kubectl apply -f objets-cours/webby-deploy.yaml

#Imperatively scale the Deployment.
kubectl scale deployment webservice --replicas=2

kubectl get pods -w
kubectl scale deployment webservice --replicas=2

...
spec:
  replicas: 4
...
kubectl apply -f objets-cours/webby-deploy.yaml

-------------------------------------------------
Liveness and readiness probe
-------------------------------------------------
--------------------------------------------------
#Now it's time to work with a livenessProbe. 
his one in particular will cause k8s to send HTTP GET messages every 5 seconds to http:<POD-IP>:9876/health. Create the following manifest that will make use of our simpleservice image.
--------------------------------------------------
kubectl apply -f objets-cours/sise-lp.yaml
kubectl get pods

kubectl describe pods sise-lp | grep -i health
Liveness:       http-get http://:9876/health delay=2s timeout=1s period=5s #success=1 #failure=3

or
kubectl port-forward sise-lp 2224:9876 --address=0.0.0.0

curl localhost:2224/health
{"healthy": true}

Before moving further, reivew https://github.com/mhausenblas/simpleservice. Pay special attention to the section that reads as follows, 'HEALTH_MIN and HEALTH_MAX ... the min. and max. delay in milliseconds that the /health endpoint responds'

Also, take a look at the k8s documentation for liveness and readiness probes. This link has all of the settings available: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes.

kubectl apply -f objets-cours/badpod.yaml
kubectl delete -f objets-cours/badpod.yaml

kubectl describe pods badpod