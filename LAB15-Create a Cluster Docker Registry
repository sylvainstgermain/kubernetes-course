We will run a docker registry in the cluster and use a special 
repo prefix such as "127.0.0.1:30500" to match both the 
port-forwarded pushing of images into the registry and the 
nodes' pulling of new images for running on the cluster.

Kubernetes uses Docker Registries to pull images in order to 
build out the containers inside of Pods. By default, Kubernetes
 is going to pull images from dockerhub, however, it is possible 
 to get images pulled down from other trusted registries.

# Faire le manifest
vim ~/docker-private-registry.yaml

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: docker-private-registry
  name: docker-private-registry-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: docker-private-registry
  template:
    metadata:
      labels:
        app: docker-private-registry
    spec:
      containers:
      - image: registry:2
        imagePullPolicy: IfNotPresent
        name: docker-private-registry
        env:
        - name: REGISTRY_HTTP_ADDR
          value: 0.0.0.0:5000
        - name: REGISTRY_HTTP_TLS_CERTIFICATE
          value: /certs/cert.crt
        - name: REGISTRY_HTTP_TLS_KEY
          value: /certs/cert.key
        ports:
        - containerPort: 5000
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/registry
          name: image-store
        - mountPath: /certs
          name: certs
      volumes:
      - emptyDir: {} # THIS IS NOT PERSISTENT! WILL DELETE WITH POD!
        name: image-store
      - name: certs
        secret:
          secretName: registry-tls
          items:
          - key: tls.crt
            path: cert.crt
            mode: 256 # 0400 in decimal
          - key: tls.key
            path: cert.key
            mode: 256 # 0400 in decimal
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: docker-private-registry
  name: docker-private-registry
spec:
  ports:
  - nodePort: 30500
    port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: docker-private-registry
  type: NodePort

---
apiVersion: v1
kind: Secret
data:
  tls.crt: #run this command in a terminal and copy results to left of # sign: base64 -w0 ~/k8s-certs/registry-web.pem && echo
  tls.key: #run this command in a terminal and copy results to left of # sign: base64 -w0 ~/k8s-certs/registry-web-key.pem && echo
metadata:
  name: registry-tls
  namespace: default
type: Opaque

2. Run the two commands shown below and place their output in 
the docker-private-registry.yaml file.











































