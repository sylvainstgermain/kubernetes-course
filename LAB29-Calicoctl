You can read more about Project Calico here: https://docs.projectcalico.org/introduction/


kubectl apply -f objets-cours/...
kubectl config current-context
kubectl delete all --all

#Confirm namespace test exists.
kubectl get namespaces

#irst, we will define a Deployment named sise-deploy. We are doing this 
#in order to have a target to use while we are testing our routing. 
#This ultimately will be an endpoint for the service that we define 
#in the next step.

#You may already have a file with the same name but different data. If so,
 vim your file, then delete the data with the following keyboard strokes.
 # First run dShiftg. Then run dgg to delete everything from your cursor 
 #to the top.
---
apiVersion: apps/v1
kind: Deployment
metadata:
 name: sise-deploy
spec:
 replicas: 2
 selector:
   matchLabels:
     app: sise
 template:
   metadata:
     labels:
       app: sise
   spec:
     containers:
     - name: sise
       image: mhausenblas/simpleservice:0.5.0
       ports:
       - containerPort: 9876
       env:
       - name: SIMPLE_SERVICE_VERSION
         value: "1.0"

 #Note that the simpleservice container is designed as a testing container, 
 #and has the following paths available to retrieve information 
 #from: /health, /info, and /env.

#Next, let's create a manifest for a Service that will select all the pods 
#inside of our sise-deploy deployment via their label app: sise. Once running,
# we will be able to target this simpleservice and observe how it is acting 
#via the command calicoctl.

---
apiVersion: v1
kind: Service
metadata:
  name: simpleservice
spec:
  ports:
    - port: 80
      targetPort: 9876
  selector:
    app: sise

#Now create both the Service and the Deployment at the same time. Sometimes
 #it is nice and makes sense when you have multiple files that need created, and each has a relation to the other.

kubectl apply -f objets-cours/sise-svc.yaml -f objets-cours/sise-deploy.yaml
































