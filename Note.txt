-------------------------------------------------------------------
Course Dates: Monday, March 1 to Friday, March 5, 2021
Course Times: 10:00 a.m. to 6:00 p.m. EST
Meeting link:
https://alta3researchinc.my.webex.com/alta3researchinc.my/j.php?MTID=m4b9a1e2b92c12e58fa1e63ef017e9e0b
Meeting number: 182 746 4400
Password: UkMK5jNik84 (85655564 from phones and video systems)

Digital copies of the course materials will be provided by your instructor during class. 
Please be prepared to access your online course materials with either the Chrome or Edge browser.
 You can test your connectivity to the lab environment by going to live.alta3.com. 
 If you see a "Welcome to Alta3 - EAS" message, you have successfully connected.

--------------------------------------------------------------------
https://live.alta3.com/groups/cheerful-crickets-burst/dashboard
sylvain
sylvain.st-germain@canada.ca

https://tmuxcheatsheet.com/
TMUX    : SHELL - Personal shell 
          split screen
          ctrl b | shift "   # Horizontal
          ctrl b | shift 5   # Vertical
          ctrl b | Arrow     # Change screen
          ctrl b | [         # scroll up  quit ->   q

TTY     : Rescue command line,
AUX1    : Take the place of localhost browser
AUX2    : Take the place of localhost browser
FiLES   : Autoindex page - Fichiers dans le répertoire static 
           student@bchd:~/static$ 

Microservice ?
Microservice architecture ?

-------------------------------------
Container 
-------------------------------------
* Put the application in isolation
* Lightweight
* Portable - self contained
* Kubernetes is a service on top of tmuxcheatsheet

-------------------------------------
Kubernetes
-------------------------------------
* External load balancer
* Cluster
    Master nodes    
    Worker node
* POds
    Wrapper
    Docker containers
    Docker registery
    Pod manifest (YAML)

Minimum - 1 node (ok for practice but not ops)
Maximum - 5000 nodes

3 nodes Minimum
3 masters - 1 is not enough even number is not good odd number absolutly

Dérange quelle noeud on roule dessus

* Possible d'avoir plus d'un cluster
* Cette semaine on jouera avec un cluster

Annoncement Kubernetes plus de support à Docker
* Docker grand pere des containers
* Kubernetes preference à Docker
* Ce qu'il ne mantienne plus est "dockershim" : cli, Volumes, API, Network, server
* Kubernetes n'a pas besoins de dockershim, on a juste besoin du container runtime
* Docker est parfaitement compatible
* No big deal !


Applications
    Monolithic
        1 executable : Database, client side, serveur side application
        Easy to start one executable
        Easy to develop
        Difficile quand plusieurs developpeur mettre des changements
        Moins agile

    SOA (service oriented applicaiton)
        Account, cart, orders - divide things
        Step up as agility
        services share one Database
        All application must speak the same language to the Database


    Microservices
        Meme chose que containers
        Data storage is isolated from containers
        Because it's not share can use different language for many containers
        Extremely agile
        Scalable

Container
    LXC 
        Base des container
    Docker
        Met un layer sur LXC pour rendre plus facile
        LXC plus un wrapper docker pour faciliter l'utilisation

PODS 
    Comment les containers peuvent parler ensemble ?
    Peut avoir des adresse IP
    Quel port est accessible sur ce Pod
    Change les rles sur comment se connecter au container

   # SEVEN - Allowed and not allowed change
    ISOLATED : CSGROUP - Resource protection
    POD : IPC - Quelle mémoire est partager, inter process commmunication
    POD : Network - network, device stack, ports,
    ISOLATED :Mount - mount point, map the directories 
    ISOLATED :PID - Processes ID
    ISOLATED :User -
    POD : UTS - container able to share hostname and domainname

Docker is just a wrapper on LXC !

LAB 1 - Docker container + Image
docker stop $(sudo docker ps -aq)
sudo docker stop $(sudo docker ps -aq)

----------------------------------------------
Plusieurs containers dans un POD

1 container de plus est creer un dummy container.
Creer individuellement, c'ets un sandbox qui fait le lienentre
tous les containers.

Il inclut les autre container dans son namespace (IPC + NETWORK + UTS)
* Tous les pod sont maintenant identifiable par la même ip adresse
* Prend sont IPC et le transfert à tous, tous les container peuvent maintenant communiquer 
par localhost, les container parlent maintenant rapidement entre eux.
* Permet à chacun des container de presenter le même hostname
* Permet à plusieurs applicaiton de fonctionner ensemble.
* Il fournissent des service à l'applicaiton principale.
* Le sandbox est pas necessaire si un pod à seulement un container
* Kubernetes mange PODS not Containers !!! Docker manage les containers
* Un POD existe seulement sur un node
* 2 PODS are the same ex:webby, ils sont des replica est comme ça ils peuvent exister
  sous forme de replica.
* Un PODS est la forme la plus atomiques de Kubernetes

Kubectl -> API serveur -> Master
Communication avec le master 
Les worker node on des kubelet (communique avec le worker)
* L'API server parle aussi au scheduler, part of master brain that play tetris : combien de resources
disponible et ou je met l'application.
* Communique avec ETC Etcd - maintain the sate of the cluster

API -> Communication HUB 

Etcd
    Key value store

Kubectl -> client pour parler au API server
kubeconfig file : file located on the local machine
        Contient la liste des cluster que l'on peut parler

Kubelet :
   Est sur les worker et master
   Recoit les ordres du master node
   Retourne le status report
   Consistently check the state of what is run inside the node
   Kubelet est reponsale de passer les commendes docker

Controller-manager
    Chef de police
    S'assure que les règles sont suivi
    ex: roule 3 replicas d'une application exemple un load balancer
    doit avoir 3 replica en tout temps
    
    Un replica meurt -> kubelet raport -> Scheduler on doit avoir 3 replica
    -> 

Docker doit rouler sur tous les nodes pour les containers dans les PODS

Registry docker.io ou local

kube-proxy : pas d,info tout de suite
    C'est sur tous les noeuds
    Essentiel pour renforcer le rles pour le traffic reseau entre les containers

--------------------------
namespaces
--------------------------
Les namespace permettre de segmenter les ressources
More precise


Manifest aller sur kubernetes et copier

---------------------------
TEMPLATES important
----------------------------


Pourquoi le kube-system à ces PODS ?
kubectl get pods -n kube-system
NAME                                       READY   STATUS    RESTARTS   AGE
calico-kube-controllers-7798c85854-kh79p   1/1     Running   0          20h
calico-node-77bj4                          1/1     Running   0          20h
calico-node-xdjhf                          1/1     Running   0          20h
calico-node-z6lbl                          1/1     Running   0          20h
coredns-5d65dd49c8-859m2                   1/1     Running   0          20h
coredns-5d65dd49c8-fz798                   1/1     Running   0          20h

Pourquoi 3 calico ?
nombre de worker node
Controller par un daemonset , s'assure qu'un pod est sur tous les nodes
Les callico pod ont les IP Adresse
calico c'est un third party apllication
Est fait pour la comunication, networking plugin

Un truc aleatoire -> replica -> calico-node-77bj4  
kubectl describe calico-node-77bj4 
Pourquoi 2 coredns ?
deux trrucs aleatoire deployment -> coredns-5d65dd49c8-859m2
Controlled by replica set
Pods that need to be alive are in deployment se recreer automatique

Replicasets
Standalon pods alone -> Bad "outside deployment"

ReplicaSet est la raison de l'implentation, maintient un set de replicas

kind: ReplicaSet
spec:
  replicas: 3

Facile d'etre scalable la nuit replicas: 8 et le jour replicas: 3

If it's broke don't fix it, recreate it ! Pods don't like change
ReplicaSet don't like change
Deployment -> Makes ReplicaSet

Deployement -> ReplicaSet -> Pods
            > New ReplicaSet > diff pods

NEVER use ReplicaSet use Deplyemnet as kind
Calico -> DaemonSet > Pods on each node

There are not load balancer they are load balancer

Calico DaemonSet ?
Deployemnet -> ReplicaSet don't care about the node but DaemonSet does care
important for Calico.

etcd : is backup by the 3 masters, replication, updated at all Times

-------------------------------
Port forwarding 
-------------------------------
kubectl port-forward PODname LocalPort:ContainerPort
kubectl port-forward nginx 2224:8080

Container port : set in Stone in the definition see on dockerhub
                 define by the image need to find it !!!

port forward is the tool to bypass le expose, access without expose
See a microservice run without putting it in production.

Exemple 2 containers, quel container sera accéder ?
webby -> 8888
nginx -> 8080

Si deux apps
webby1 8888
webby2 8888  port conflict

Lab number 9
POD has just 1 ip adresse

------------------------------
Create vs apply?
------------------------------
Imperative "create/delete"  |   Declarative "apply"
Dramatic change                 tweakin some incremental

Theoriquement on utilise seulement create ou apply, si on melanfge
les deux c'est ok mais on a des warnings.

Exec vs Attach ?
https://github.com/kubernetes/kubernetes/issues/23335

ex: Exec bash
Have access to all process

kubectl Attach
attach in a process in the container

Si un container il va direct sur le container si plus d,un container faire attention 
de specifier le bon.

First command toi debug a pod
kubectl describe pod <POD NAME>

--------------------------
lABEL + Annotation
--------------------------
Group pods together, delete, change all that pods

* In the manifest the label is under metadata
* can have many labels

kubectl label pods nginx
kubectl get pods -l environment=production,tier=frontend
kubectl get pods -l 'environment in (production),tier in (frontend)'
kubectl get pods -l 'environment in (production, qa)'
kubectl get pods -l 'environment,environment notin (frontend)'

Dans le manifest on peut faire unselecteur
 matchLabels ou matchexpression

kind: Deployment
metadata:
spec:
  selector:
    matchLabels:
     app: flaminco
     appweb : moose 

Utilise tous les pods qui match le label

# a la place de matchLabels
matchExpression:
  - { key: app, operator: IN, values: [alpaca,flamico]}

  match app: alpaca ou app: flamico

  Annotation is similar but fundamentaly different
